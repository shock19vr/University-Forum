import tkinter as tk
from tkinter import ttk
import re

def is_variable_defined(expr, variables):
    for variable in re.findall(r'[a-zA-Z_][a-zA-Z0-9_]*', expr):
        if variable not in variables:
            return False
    return True

def infix_to_postfix(infix_expr):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
    output = []
    operator_stack = []
    for token in infix_expr:
        if token.isalnum() or token.isalpha():
            output.append(token)
        elif token in '+-*/^':
            while operator_stack and precedence.get(operator_stack[-1], 0) >= precedence.get(token, 0):
                output.append(' ' + operator_stack.pop())
            operator_stack.append(token)
        elif token == '(':
            operator_stack.append(token)
        elif token == ')':
            while operator_stack and operator_stack[-1] != '(':
                output.append(' ' + operator_stack.pop())
            if operator_stack and operator_stack[-1] == '(':
                operator_stack.pop()
    while operator_stack:
        output.append(' ' + operator_stack.pop())
    postfix_expr = ''.join(output)
    return postfix_expr

def evaluate_postfix(postfix_expr, variables):
    stack = []
    tokens = postfix_expr.split()
    for token in tokens:
        if token.isalnum() or token.isalpha():
            stack.append(token)
        elif token in '+-*/^':
            operand2 = stack.pop()
            operand1 = stack.pop()
            try:
                result = str(eval(operand1 + token + operand2, variables))
                stack.append(result)
            except Exception:
                return "Variable Value not defined"
    return stack[0]

def calculate():
    infix_expression = entry.get()
    variables = {}  # Dictionary to store variable values
    if not is_variable_defined(infix_expression, variables):
        result_label.config(text="Variable Value not defined")
    else:
        postfix_expression = infix_to_postfix(infix_expression)
        postfix_label.config(text="Postfix: " + postfix_expression)
        result = evaluate_postfix(postfix_expression, variables)
        result_label.config(text="Result: " + result)

root = tk.Tk()
root.title("Infix to Postfix Calculator")

entry = tk.Entry(root, width=30, font=('Arial', 16))
entry.grid(row=0, column=0, columnspan=4, pady=10)

ttk.Button(root, text="Calculate", command=calculate, style="TButton").grid(row=1, column=0, columnspan=4, pady=10)

postfix_label = tk.Label(root, text="Postfix:", font=('Arial', 16))
postfix_label.grid(row=2, column=0, columnspan=4, pady=10)

result_label = tk.Label(root, text="Result:", font=('Arial', 16))
result_label.grid(row=3, column=0, columnspan=4, pady=10)

style = ttk.Style()
style.configure("TButton", font=('Arial', 16), padding=5, background='lightblue', relief="groove", borderwidth=5)
style.map("TButton", background=[('active', 'dodgerblue')])

root.mainloop()
